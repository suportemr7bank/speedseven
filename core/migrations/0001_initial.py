# Generated by Django 3.2 on 2022-06-06 17:32

import core.models
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', core.models.CoreUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AcceptanceTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256, verbose_name='Título')),
                ('type', models.CharField(choices=[('SIG', 'Uso da plataforma'), ('PPO', 'Política de provacidade')], max_length=3, verbose_name='Tipo de termo')),
                ('text', tinymce.models.HTMLField(verbose_name='Texto to termo')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('date_changed', models.DateTimeField(auto_now=True, verbose_name='Última atualização')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('annotation', models.TextField(blank=True, null=True, verbose_name='Anotações')),
                ('version', models.PositiveIntegerField(verbose_name='Versão')),
            ],
            options={
                'verbose_name': 'Termo de aceite',
                'verbose_name_plural': 'Termos de aceite',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Nome da empresa')),
                ('cnpj', models.CharField(max_length=20, verbose_name='CNPJ')),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email de contato')),
                ('disclaimer', models.CharField(blank=True, help_text='Máximo de 1024 caracteres', max_length=1024, null=True, verbose_name='Disclaimer')),
                ('bank_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nome do banco')),
                ('bank_code', models.IntegerField(blank=True, null=True, verbose_name='Código do banco')),
                ('bank_ispb', models.IntegerField(blank=True, null=True, verbose_name='ISPB')),
                ('bank_branch_number', models.IntegerField(blank=True, null=True, verbose_name='Agência')),
                ('bank_branch_digit', models.CharField(blank=True, max_length=1, null=True, verbose_name='Dígito da agência')),
                ('account_number', models.IntegerField(blank=True, null=True, verbose_name='Número da conta')),
                ('account_digit', models.IntegerField(blank=True, null=True, verbose_name='Dígito da conta')),
            ],
            options={
                'verbose_name': 'Dados da empresa',
                'verbose_name_plural': 'Dados das empresas',
            },
        ),
        migrations.CreateModel(
            name='EmailBatchMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('ADMIN', 'Administrador'), ('CLIENT', 'Cliente'), ('BROKER', 'Gerente de conta'), ('APIACC', 'Acesso à página da API'), ('APIAPP', 'Acesso à API'), ('UNDEF', 'Indefinido')], max_length=6, verbose_name='Papel')),
                ('subject', models.CharField(blank=True, max_length=256, null=True, verbose_name='Assunto')),
                ('message', tinymce.models.HTMLField(verbose_name='Mensagem')),
                ('status', models.CharField(choices=[('FINI', 'Finalizado'), ('FERR', 'Finalizado com erro'), ('PROC', 'Processando'), ('WAIT', 'Aguardando')], default='WAIT', max_length=4, verbose_name='Situação')),
                ('sent', models.PositiveIntegerField(default=0, verbose_name='Enviados')),
                ('total', models.PositiveIntegerField(default=0, verbose_name='Total')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('date_finished', models.DateTimeField(blank=True, null=True, verbose_name='Data de finalização')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Operador')),
            ],
            options={
                'verbose_name': 'Lote de email',
                'verbose_name_plural': 'Lotes de emails',
            },
        ),
        migrations.CreateModel(
            name='WorkflowTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Nome da tarefa')),
                ('register_id', models.IntegerField(verbose_name='Id do registro')),
                ('form_view', models.CharField(max_length=256, verbose_name='View do formulário')),
                ('history_model', models.CharField(blank=True, max_length=256, null=True, verbose_name='Modelo do histórico do registro')),
                ('history_id', models.IntegerField(blank=True, null=True, verbose_name='Id do histórico do registro')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Criação')),
                ('date_verified', models.DateTimeField(blank=True, null=True, verbose_name='Verificação')),
                ('status', models.CharField(max_length=64, verbose_name='Situação')),
                ('evaluator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='workflowtask_evaluator', to=settings.AUTH_USER_MODEL, verbose_name='avaliador')),
                ('operator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workflowtask_operator', to=settings.AUTH_USER_MODEL, verbose_name='operador')),
            ],
            options={
                'verbose_name': 'Tarefa',
                'verbose_name_plural': 'Tarefas',
            },
        ),
        migrations.CreateModel(
            name='UserAcceptanceTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acceptance_date', models.DateTimeField(auto_now_add=True, verbose_name='Data de aceitação')),
                ('date_cancelled', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Cancelamento')),
                ('term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.acceptanceterm', verbose_name='Term de aceite')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
        ),
        migrations.CreateModel(
            name='EmailSendFailed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Data de criação')),
                ('error_message', models.TextField()),
                ('email_batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.emailbatchmessage')),
            ],
            options={
                'verbose_name': 'Falha de envio de email',
                'verbose_name_plural': 'Falhas de envio de email',
            },
        ),
        migrations.CreateModel(
            name='EmailBatchRecipient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sent', models.BooleanField(default=False, verbose_name='Enviado')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='Mensagem de erro')),
                ('email_batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.emailbatchmessage', verbose_name='Lote de envio')),
                ('email_send_failed', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.emailsendfailed', verbose_name='Lote de falha de envio')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Email agendado',
                'verbose_name_plural': 'Emails agendados',
            },
        ),
        migrations.AddConstraint(
            model_name='acceptanceterm',
            constraint=models.UniqueConstraint(fields=('type', 'version'), name='unique_term_version'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
