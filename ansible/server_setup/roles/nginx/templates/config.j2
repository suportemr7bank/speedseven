upstream {{ application_name }}_wsgi_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:{{ virtualenv_path }}/run/gunicorn.sock fail_timeout=0;
}

server {
    listen 80;
    server_name {{ nginx_server_name_http }};
    return 301 https://{{ nginx_main_server }}$request_uri;
}

server {
    listen 443;
    server_name {{ nginx_server_name_https }};

    ssl on;
    ssl_certificate {{ nginx_ssl_target_folder }}/{{ nginx_ssl_crt_file }};
    ssl_certificate_key {{ nginx_ssl_target_folder }}/{{ nginx_ssl_key_file }};

    client_max_body_size 4G;

    access_log {{ nginx_log_file_dir }}/nginx-access.log;
    error_log {{ nginx_log_file_dir }}/nginx-error.log;

    {% if nginx_static_dir %}
    location /static/ {
        alias   {{ nginx_static_dir }};
    }
    {% endif %}

    {% if nginx_media_public_url and nginx_media_public_dir %}
    location {{ nginx_media_public_url }} {
        alias   {{ nginx_media_public_dir }};
    }
    {% endif %}

    location / {
        # if (-f {{ virtualenv_path }}/maintenance_on.html) {
        #     return 503;
        # }

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Host $host;
        proxy_redirect off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://{{ application_name }}_wsgi_server;
            break;
        }
    }

    # Error pages
    error_page 500 502 504 /500.html;
    location = /500.html {
        root {{ project_path }}/{{ application_name }}/templates/;
    }

    # error_page 503 /maintenance_on.html;
    # location = /maintenance_on.html {
    #     root {{ virtualenv_path }}/;
    # }
}