"""
Django settings for speedseven project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

import environ

env = environ.Env(DEBUG=(bool, False))

environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG')

ALLOWED_HOSTS = tuple(env.list('ALLOWED_HOSTS', default=[]))

AUTH_USER_MODEL = 'core.User'

# Application definition

INSTALLED_APPS = [
    "whitenoise.runserver_nostatic",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'channels',
    'flatpickr',
    'tinymce',
    'simple_history',
    'core',
    'constance',
    'constance.backends.database',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'nested_admin',
    'invitations',
    'rest_framework',
    'rest_framework_simplejwt',
    'accounts',
    'django_tables2',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_celery_beat',
    'django_select2',
    'django_db_logger',
    'common',
    'scheduler',
    'website',
    'emailtemplates',
    'clients',
    'charts',
    'investorprofile',
    'products',
    'drf_spectacular',
    'drf_spectacular_sidecar',
    'corsheaders',
    'investment',
    'investment.applications.pool_account',
    'investment.applications.crowdfunding',
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.sites.middleware.CurrentSiteMiddleware',
    'common.middlewares.PageContentRequest',
    'accounts.middlewares.ThemeMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware'
]


ROOT_URLCONF = 'speedseven.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'accounts', 'templates/'),
            os.path.join(BASE_DIR, 'clients', 'templates/'),
            os.path.join(BASE_DIR, 'common', 'templates/'),
            os.path.join(BASE_DIR, 'emailtemplates', 'templates/override/')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'constance.context_processors.config',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.site_name_logo_url'
            ],
        },
    },
]


WSGI_APPLICATION = 'speedseven.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': env.db(),
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True

USE_THOUSAND_SEPARATOR = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = BASE_DIR / 'static'

MEDIA_URL = '/media/'

MEDIA_ROOT = BASE_DIR / 'media'

STATICFILES_DIRS = [BASE_DIR / "frontend/dist"]


STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

##########
# Django constance

CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'


##########
# Django  Allauth
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend'
]

SITE_ID = 1

LOGIN_REDIRECT_URL = '/contas/login/'
LOGIN_URL = '/contas/login/'

ACCOUNT_ADAPTER = 'accounts.adapters.RedirectAdapter'

ACCOUNT_EMAIL_REQUIRED = True

ACCOUNT_AUTHENTICATION_METHOD = 'email'

ACCOUNT_LOGOUT_REDIRECT_URL = '/'

ACCOUNT_CONFIRM_EMAIL_ON_GET = True

ACCOUNT_EMAIL_VERIFICATION = env.str('ACCOUNT_EMAIL_VERIFICATION', 'mandatory')

ACCOUNT_FORMS = {
    'signup': 'accounts.forms.SignupForm',
    'login': 'accounts.forms.LoginForm',
}

ACCOUNT_LOGIN_ATTEMPTS_LIMIT = None

##########
# Accounts
# roles defined in accounts.roles.Roles

# Form class for when a invitation is send
# Other roles uses ACCOUNT_FORMS
ACCOUNTS_INVITATION_ROLE_SIGNUP_FORMS = {
    'CLIENT': 'clients.forms.SignupForm'
}

# Form class for sigup request without invitation
# In this case there is no role defined
ACCOUNTS_DEFAULT_SIGNUP_FORM = 'clients.forms.SignupForm'

# Show acceptance term modal for client signup only
ACCOUNTS_SIGNUP_VIEW = 'clients.views.clients.SignupView'

# Redirect based on user role
ACCOUNTS_ROLE_LOGIN_REDIRECT_VIEW = {
    'ADMIN': 'core:start_page',
    'APIACC': 'core:api_page',
    'CLIENT': 'clients:start_page',
}

##########
# Django Invitations

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

INVITATIONS_ADAPTER = ACCOUNT_ADAPTER

INVITATIONS_INVITATION_EXPIRY = 30

INVITATIONS_ALLOW_JSON_INVITES = False

INVITATIONS_INVITATION_ONLY = False

INVITATIONS_CONFIRM_INVITE_ON_GET = True

INVITATIONS_ACCEPT_INVITE_AFTER_SIGNUP = True

INVITATIONS_INVITATION_MODEL = 'accounts.CustomInvitation'

##########
# Django Crispy forms

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"


##########
# Dynamic varibles

CONSTANCE_CONFIG = {
    'ACCOUNT_ENABLE_SIGNUP': (False, 'Enable user signup', bool),
    'ACCOUNT_ENABLE_SIGNIN': (True, 'Enable user signin', bool),
    'ACCOUNT_ENABLE_INVITATION': (True, 'Enable user invitation', bool),
    'ACCOUNT_INVITATION_EXPIRY': (10, 'Invitation expiration time in days', int),
    'CORE_SHOW_MESSAGES': (True, 'Show popup messages', bool),
    'CORE_SHOW_TIKER_TAPE': (True, 'Show Tradingview ticker tape widget', bool),
    'CORE_PAGE_CONTENT_RELOAD': (False, 'Reloads only page content with ajax', bool),
    'AGREEMENT_NOTIFY_END_BEFORE_DAYS': (15, 'Notify agreement expire before days number', int),
    'MAX_BANK_ACCOUNT_NUMBER': (2, "Max number of client banck account", int)
}


##########
# Email

EMAIL_BACKEND = env.str('EMAIL_BACKEND')
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS')
EMAIL_USE_SSL = env.bool('EMAIL_USE_SSL')
EMAIL_HOST = env.str('EMAIL_HOST')
EMAIL_HOST_USER = env.str('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env.str('EMAIL_HOST_PASSWORD')
EMAIL_PORT = env.int('EMAIL_PORT')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


##########
# flatpickr

FLATPICKR_SETTINGS = {

    'options': {
        'locale': 'pt',          # locale option can be set here only
        'dateFormat': 'd/m/Y H:i',  # reflects in altFormat
    },
}


##########
# TinyMce richtext editor

TINYMCE_DOMAIN = env.str('TINYMCE_DOMAIN', "http://localhost:8000/")

TINYMCE_UPLOAD_FOLDER = MEDIA_ROOT / 'doc-images'

TINYMCE_URL =  'media/doc-images/'

TINYMCE_DEFAULT_CONFIG = {
    "images_upload_url": '/'+TINYMCE_URL,
    "menubar": "file edit view insert format tools table help",
    "plugins": "advlist autolink lists link image "
    "charmap print preview searchreplace visualblocks code "
    "fullscreen insertdatetime table paste code help wordcount",
    "toolbar": "undo redo | bold italic underline strikethrough "
    "| fontselect fontsizeselect formatselect | alignleft "
    "aligncenter alignright alignjustify | outdent indent | numlist bullist checklist | fullscreen",
    "custom_undo_redo_levels": 10,
    'image_list': [
        {'title': 'Logo para impress√£o', 'value': 'static/core/printlogo.png'},
    ],
    'link_list': [
        {'title': 'Abrir conta', 'value': '/contas/signup/'},
        {'title': 'Login', 'value': '/contas/login/'},
    ],
    'image_description': False,
    'image_prepend_url': TINYMCE_DOMAIN,
    'convert_urls': False,
}



#########
# Celery beat background task

CELERYBEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_ENABLE_UTC = False
CELERY_TIMEZONE = 'America/Sao_Paulo'


##########
# Django channels (websocket)
ASGI_APPLICATION = 'speedseven.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

##########
# Django rest framework and jwt
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'accounts.auth.rest.ApiUserIsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication'
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer'
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

##########
# Django djangorestframework-simplejwt
SIMPLE_JWT = {
    'USER_AUTHENTICATION_RULE': 'accounts.auth.rest.api_user_authentication_rule',
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=env.int('ACCESS_TOKEN_LIFETIME_MINUTES', 5))
}

##########
# Django drf-spectacular
SPECTACULAR_SETTINGS = {
    'TITLE': 'Speedseven API',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SWAGGER_UI_DIST': 'SIDECAR',
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
}

##########
# Api config
# Control api access
# True - Allow APIAPP role access to api only (production mode)
# False - Allow APIACC and APIAPP role access to api (development mode)
API_ENABLE_PRODUCTION_MODE = env.bool('API_ENABLE_PRODUCTION_MODE', True)


##########
# CORS django-cors-headers
CORS_ALLOW_ALL_ORIGINS = env.bool('CORS_ALLOW_ALL_ORIGINS', False)
CORS_ALLOWED_ORIGINS = tuple(env.list('CORS_ALLOWED_ORIGINS', default=[]))
CORS_ALLOWED_ORIGIN_REGEXES = env.str('CORS_ALLOWED_ORIGIN_REGEXES', '')


##########
# User profile
USER_PROFILE_DEFAULT_THEME = 'dark'


##########
# User profile
INCOME_OPERATION_RUN_IN_BACKGROUND = env.bool(
    'INCOME_OPERATION_RUN_IN_BACKGROUND', True)


##########
# Loggin in database and sending email

SERVER_EMAIL = 'dev@mecainvestimentos.com.br'

ADMINS = (
   ('Admin', 'dev@mecainvestimentos.com.br'),
)

MANAGERS = ADMINS

DB_LOGGER = 'db'

DJANGO_DB_LOGGER_ENABLE_FORMATTER=True

if not DEBUG:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '%(levelname)s %(asctime)s [%(pathname)s:%(lineno)d] %(message)s'
            },
        },
        'handlers': {
            'db_log': {
                'level': 'DEBUG',
                'class': 'core.logging.DatabaseEmailReporter',
                'email_backend': env.str('LOGGING_EMAIL_BACKEND',
                'django.core.mail.backends.smtp.EmailBackend'),
                'formatter': 'verbose'
            },
        },
        'loggers': {
            DB_LOGGER: {
                'handlers': ['db_log'],
                'level': 'DEBUG'
            },
            'django.request': {  # logging 500 errors to database
                'handlers': ['db_log'],
                'level': 'ERROR',
                'propagate': False,
            }
        }
    }
